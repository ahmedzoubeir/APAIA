%%capture
# Installs Unsloth, Xformers (Flash Attention) and all other packages!
!pip install "unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git"

# We have to check which Torch version for Xformers (2.3 -> 0.0.27)
from torch import __version__; from packaging.version import Version as V
xformers = "xformers==0.0.27" if V(__version__) < V("2.4.0") else "xformers"
!pip install --no-deps {xformers} trl peft accelerate bitsandbytes triton





!pip install xformers




pip install --no-cache-dir https://github.com/facebookresearch/xformers/archive/refs/heads/main.zip






# prompt: login to huggingface

from huggingface_hub import notebook_login
notebook_login()






from unsloth import FastLanguageModel
import torch
max_seq_length = 2048 # Choose any! We auto support RoPE Scaling internally!
dtype = None # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
load_in_4bit = True # Use 4bit quantization to reduce memory usage. Can be False.

# 4bit pre quantized models we support for 4x faster downloading + no OOMs.
fourbit_models = [
    "unsloth/Meta-Llama-3.1-8B-bnb-4bit",      # Llama-3.1 15 trillion tokens model 2x faster!
    "unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit",
    "unsloth/Meta-Llama-3.1-70B-bnb-4bit",
    "unsloth/Meta-Llama-3.1-405B-bnb-4bit",    # We also uploaded 4bit for 405b!
    "unsloth/Mistral-Nemo-Base-2407-bnb-4bit", # New Mistral 12b 2x faster!
    "unsloth/Mistral-Nemo-Instruct-2407-bnb-4bit",
    "unsloth/mistral-7b-v0.3-bnb-4bit",        # Mistral v3 2x faster!
    "unsloth/mistral-7b-instruct-v0.3-bnb-4bit",
    "unsloth/Phi-3.5-mini-instruct",           # Phi-3.5 2x faster!
    "unsloth/Phi-3-medium-4k-instruct",
    "unsloth/gemma-2-9b-bnb-4bit",
    "unsloth/gemma-2-27b-bnb-4bit",            # Gemma 2x faster!
] # More models at https://huggingface.co/unsloth

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Meta-Llama-3.1-8B",
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
    # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
)









model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)













import csv
import json

def csv_to_json(csv_file_path, json_file_path):
    # Create a list to store the CSV data
    data = []

    # Read the CSV file
    with open(csv_file_path, mode='r', encoding='utf-8') as csv_file:
        csv_reader = csv.DictReader(csv_file)
        for row in csv_reader:
            data.append(row)

    # Write the data to a JSON file
    with open(json_file_path, mode='w', encoding='utf-8') as json_file:
        json.dump(data, json_file, indent=4)

# Example usage
csv_file_path = 'gemini_responses_rcm.csv'  # Replace with your CSV file path
json_file_path = 'gemini_responses_rcm.json'  # Replace with your desired JSON file path
csv_to_json(csv_file_path, json_file_path)

print(f"CSV data has been converted to JSON and saved to {json_file_path}")












alpaca_prompt = """You are a cybersecurity expert. Given the following vulnerability description, 
identify the appropriate CWE category. Return only the CWE ID and name. If multiple CWE IDs apply, provide the most relevant one.

### Description:
{}

### Response:
{}"""
EOS_TOKEN = tokenizer.eos_token  # Must add EOS_TOKEN

def formatting_prompts_func(examples):
    inputs = examples["Description"]  # Use 'Description' as the input
    outputs = examples["Gemini_Response"]  # Use 'Gemini_Response' as the output
    texts = []
    for input, output in zip(inputs, outputs):
        # Format using the new alpaca_prompt template
        text = alpaca_prompt.format(input, output) + EOS_TOKEN
        texts.append(text)
    return {"text": texts}

from datasets import load_dataset

# Load your custom dataset
dataset = load_dataset('json', data_files='gemini_responses_rcm.json', split='train')

# Apply the formatting function
dataset = dataset.map(formatting_prompts_func, batched=True)













from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        # num_train_epochs = 1, # Set this for 1 full training run.
        max_steps = 60,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
    ),
)













trainer_stats = trainer.train()














custom_prompt = """You are a cybersecurity expert. Given the following vulnerability description, 
identify the appropriate CWE category. Return only the CWE ID and name. If multiple CWE IDs apply, provide the most relevant one.

### Description:
{}
### Response:"""  # Removed the second {}

# Replace with your own question and options
Description = "In TVAPI, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: DTV03961601; Issue ID: DTV03961601."

# Tokenize the input using the trained model's tokenizer
inputs = tokenizer(
    [
        custom_prompt.format(
            Description)  # Only one argument is passed
    ],
    return_tensors="pt"
).to("cuda")  # Ensure it's on the same device as the model

# Generate the output (the model predicts the answer)
outputs = model.generate(**inputs, max_new_tokens=64, use_cache=True)

# Decode the output into readable text
decoded_outputs = tokenizer.batch_decode(outputs, skip_special_tokens=True)

# Print the model's response
print(decoded_outputs[0])











model.save_pretrained("LLAMA_cti") # Local saving
tokenizer.save_pretrained("LLAMA_cti")