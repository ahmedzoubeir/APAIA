Question,Option A,Option B,Option C,Option D,Correct Answer,Explanation
What is a potential defense strategy against adversaries creating persistent containers using "docker run" or "podman run" with "restart=always"?,Enforce container services in rootless mode,Limit access to docker/podman to authorized users,Monitor for suspicious uses of docker/podman,All of the above,D,All of the provided options are valid defense strategies against adversaries creating persistent containers using "docker run" or "podman run" with "restart=always". Enforcing rootless mode reduces the potential for privilege escalation, limiting access to authorized users restricts unauthorized actions, and monitoring suspicious activity helps detect malicious attempts.,
What is the name of the MITRE ATT&CK technique associated with adversaries creating or modifying container services to achieve persistence or privilege escalation?,Create or Modify System Process (T1547.002),Lateral Movement (T1071),Privilege Escalation (T1068),Command and Control (T1070),A,The provided text specifically describes the adversary tactic of creating or modifying container services for persistence or privilege escalation, which aligns with the MITRE ATT&CK technique "Create or Modify System Process" (T1547.002).,
Which of the following is NOT a mitigation against adversaries leveraging container management tools for malicious purposes in Kubernetes environments?,Enforce rootless mode for container services,Limit access to "kubectl" to authorized users,Monitor for suspicious uses of "kubectl",Utilize Network Segmentation to restrict access to container clusters,D,While Network Segmentation is a valuable security practice, it is not a direct mitigation against adversaries exploiting container management tools in Kubernetes environments. Enforcing rootless mode, limiting access to "kubectl", and monitoring its usage directly address the vulnerabilities related to container management tools.,
In a Kubernetes environment, how can an adversary ensure that containers are persistently deployed across all nodes, including newly added ones?,Using the "nodeSelector" field in the pod spec to deploy to specific nodes,Using the "nodeName" field in the pod spec to deploy to specific nodes,Leveraging DaemonSets to deploy containers on all nodes,Using "docker run" or "podman run" with "restart=always",C,The provided text explicitly mentions that DaemonSets in Kubernetes allow adversaries to deploy containers persistently on all nodes, even those added later to the cluster. This behavior distinguishes DaemonSets from the other options.,
What is a common detection strategy for identifying malicious containers that repeatedly execute payloads as part of persistence or privilege escalation?,Monitoring for suspicious uses of "docker" or "podman",Analyzing container logs for repeated execution of suspicious commands,Monitoring for containers with unusual resource consumption patterns,All of the above,D,The provided text suggests monitoring suspicious uses of "docker" or "podman" and identifying containers that repeatedly execute malicious payloads. Additionally, analyzing container logs and monitoring resource consumption can help detect suspicious behavior associated with persistent containers.,
Which of the following is a potential security concern when using container services in rootful mode?,Limited resource allocation for containers,Increased attack surface due to higher privilege level,Inability to run specific container images,Increased vulnerability to denial-of-service attacks,B,Using container services in rootful mode grants containers elevated privileges, expanding the attack surface and potentially allowing an adversary to exploit vulnerabilities for privilege escalation or other malicious actions. The other options are not directly related to the security concerns of using rootful mode.,
What is the primary objective of enforcing the use of container services in rootless mode as a defense strategy?,To prevent container services from accessing the host operating system,To limit the impact of container failures on the host system,To enhance the performance of containerized applications,To reduce the potential for privilege escalation by malicious actors,D,Enforcing rootless mode for container services aims to limit the potential for privilege escalation by malicious actors. Running containers in rootless mode restricts their access to the host system, mitigating the risk of exploitation for gaining higher privileges. The other options are not the primary goals of running containers in rootless mode.,
Which of the following is a specific example of a container management tool that could be exploited by adversaries for malicious purposes?,Docker,Kubernetes,Podman,All of the above,D,The provided text mentions Docker and Podman as container management tools that adversaries could exploit. Kubernetes is also a container orchestration platform that could be targeted for malicious purposes. Therefore, all of the options represent potential targets for adversary actions.,
What is a potential indicator of compromise (IOC) related to adversaries creating or modifying container services for malicious purposes?,Presence of containers with unusual resource consumption patterns,Execution of unusual commands within containers,Detection of unauthorized deployments of containers,All of the above,D,All of the provided options are potential indicators of compromise related to adversaries creating or modifying container services for malicious purposes. Unusual resource consumption, execution of unusual commands, and unauthorized deployments all suggest malicious activity within containerized environments.,
Why is it important to limit access to container management utilities like "docker" or "podman" to authorized users?,To prevent unauthorized users from deploying containers,To ensure that only authorized users can modify container configurations,To monitor the usage of container management utilities more effectively,All of the above,D,Limiting access to container management utilities like "docker" or "podman" to authorized users serves multiple purposes. It prevents unauthorized deployment of containers, restricts modifications of container configurations, and makes monitoring the usage of these utilities more effective by limiting the number of users who have access. 
